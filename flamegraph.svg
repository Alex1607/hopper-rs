<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1029.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="210"><g><title>[[stack]] (1 samples, 0.48%)</title><rect x="0.0000%" y="965" width="0.4762%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::as_handle_inner (1 samples, 0.48%)</title><rect x="0.0000%" y="949" width="0.4762%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 2.86%)</title><rect x="0.4762%" y="965" width="2.8571%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="6"/><text x="0.7262%" y="975.50">[l..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.48%)</title><rect x="2.8571%" y="949" width="0.4762%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="3.1071%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.48%)</title><rect x="2.8571%" y="933" width="0.4762%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="3.1071%" y="943.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.48%)</title><rect x="2.8571%" y="917" width="0.4762%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="3.1071%" y="927.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.48%)</title><rect x="2.8571%" y="901" width="0.4762%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="3.1071%" y="911.50"></text></g><g><title>hopper (67 samples, 31.90%)</title><rect x="0.0000%" y="981" width="31.9048%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="67"/><text x="0.2500%" y="991.50">hopper</text></g><g><title>__clone (60 samples, 28.57%)</title><rect x="3.3333%" y="965" width="28.5714%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="60"/><text x="3.5833%" y="975.50">__clone</text></g><g><title>[libc.so.6] (8 samples, 3.81%)</title><rect x="28.0952%" y="949" width="3.8095%" height="15" fill="rgb(220,122,19)" fg:x="59" fg:w="8"/><text x="28.3452%" y="959.50">[lib..</text></g><g><title>__ctype_init (1 samples, 0.48%)</title><rect x="31.4286%" y="933" width="0.4762%" height="15" fill="rgb(250,228,42)" fg:x="66" fg:w="1"/><text x="31.6786%" y="943.50"></text></g><g><title>&lt;&amp;mut T as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.48%)</title><rect x="31.9048%" y="949" width="0.4762%" height="15" fill="rgb(240,193,28)" fg:x="67" fg:w="1"/><text x="32.1548%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="32.3810%" y="949" width="0.4762%" height="15" fill="rgb(216,20,37)" fg:x="68" fg:w="1"/><text x="32.6310%" y="959.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.48%)</title><rect x="32.8571%" y="949" width="0.4762%" height="15" fill="rgb(206,188,39)" fg:x="69" fg:w="1"/><text x="33.1071%" y="959.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.48%)</title><rect x="33.3333%" y="949" width="0.4762%" height="15" fill="rgb(217,207,13)" fg:x="70" fg:w="1"/><text x="33.5833%" y="959.50"></text></g><g><title>&lt;tokio::util::wake_list::WakeList as core::ops::drop::Drop&gt;::drop (1 samples, 0.48%)</title><rect x="33.8095%" y="949" width="0.4762%" height="15" fill="rgb(231,73,38)" fg:x="71" fg:w="1"/><text x="34.0595%" y="959.50"></text></g><g><title>core::mem::replace (2 samples, 0.95%)</title><rect x="34.2857%" y="949" width="0.9524%" height="15" fill="rgb(225,20,46)" fg:x="72" fg:w="2"/><text x="34.5357%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.95%)</title><rect x="35.2381%" y="949" width="0.9524%" height="15" fill="rgb(210,31,41)" fg:x="74" fg:w="2"/><text x="35.4881%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.48%)</title><rect x="36.1905%" y="949" width="0.4762%" height="15" fill="rgb(221,200,47)" fg:x="76" fg:w="1"/><text x="36.4405%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.48%)</title><rect x="36.6667%" y="949" width="0.4762%" height="15" fill="rgb(226,26,5)" fg:x="77" fg:w="1"/><text x="36.9167%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.48%)</title><rect x="37.1429%" y="949" width="0.4762%" height="15" fill="rgb(249,33,26)" fg:x="78" fg:w="1"/><text x="37.3929%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.48%)</title><rect x="37.6190%" y="949" width="0.4762%" height="15" fill="rgb(235,183,28)" fg:x="79" fg:w="1"/><text x="37.8690%" y="959.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.48%)</title><rect x="38.0952%" y="949" width="0.4762%" height="15" fill="rgb(221,5,38)" fg:x="80" fg:w="1"/><text x="38.3452%" y="959.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (1 samples, 0.48%)</title><rect x="38.5714%" y="949" width="0.4762%" height="15" fill="rgb(247,18,42)" fg:x="81" fg:w="1"/><text x="38.8214%" y="959.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.48%)</title><rect x="39.0476%" y="949" width="0.4762%" height="15" fill="rgb(241,131,45)" fg:x="82" fg:w="1"/><text x="39.2976%" y="959.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.48%)</title><rect x="39.5238%" y="949" width="0.4762%" height="15" fill="rgb(249,31,29)" fg:x="83" fg:w="1"/><text x="39.7738%" y="959.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.48%)</title><rect x="40.0000%" y="949" width="0.4762%" height="15" fill="rgb(225,111,53)" fg:x="84" fg:w="1"/><text x="40.2500%" y="959.50"></text></g><g><title>tokio::time::driver::handle::Handle::get (1 samples, 0.48%)</title><rect x="40.4762%" y="949" width="0.4762%" height="15" fill="rgb(238,160,17)" fg:x="85" fg:w="1"/><text x="40.7262%" y="959.50"></text></g><g><title>[[heap]] (20 samples, 9.52%)</title><rect x="31.9048%" y="965" width="9.5238%" height="15" fill="rgb(214,148,48)" fg:x="67" fg:w="20"/><text x="32.1548%" y="975.50">[[heap]]</text></g><g><title>tokio::util::slab::Slab&lt;T&gt;::get (1 samples, 0.48%)</title><rect x="40.9524%" y="949" width="0.4762%" height="15" fill="rgb(232,36,49)" fg:x="86" fg:w="1"/><text x="41.2024%" y="959.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 0.48%)</title><rect x="41.4286%" y="949" width="0.4762%" height="15" fill="rgb(209,103,24)" fg:x="87" fg:w="1"/><text x="41.6786%" y="959.50"></text></g><g><title>&lt;&amp;mut T as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.95%)</title><rect x="41.9048%" y="949" width="0.9524%" height="15" fill="rgb(229,88,8)" fg:x="88" fg:w="2"/><text x="42.1548%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.48%)</title><rect x="42.8571%" y="949" width="0.4762%" height="15" fill="rgb(213,181,19)" fg:x="90" fg:w="1"/><text x="43.1071%" y="959.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u32::AtomicU32 as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="43.3333%" y="949" width="0.4762%" height="15" fill="rgb(254,191,54)" fg:x="91" fg:w="1"/><text x="43.5833%" y="959.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="43.8095%" y="949" width="0.4762%" height="15" fill="rgb(241,83,37)" fg:x="92" fg:w="1"/><text x="44.0595%" y="959.50"></text></g><g><title>clock_gettime (1 samples, 0.48%)</title><rect x="44.2857%" y="949" width="0.4762%" height="15" fill="rgb(233,36,39)" fg:x="93" fg:w="1"/><text x="44.5357%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.48%)</title><rect x="44.7619%" y="949" width="0.4762%" height="15" fill="rgb(226,3,54)" fg:x="94" fg:w="1"/><text x="45.0119%" y="959.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.48%)</title><rect x="45.2381%" y="949" width="0.4762%" height="15" fill="rgb(245,192,40)" fg:x="95" fg:w="1"/><text x="45.4881%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.48%)</title><rect x="45.7143%" y="949" width="0.4762%" height="15" fill="rgb(238,167,29)" fg:x="96" fg:w="1"/><text x="45.9643%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (1 samples, 0.48%)</title><rect x="46.1905%" y="949" width="0.4762%" height="15" fill="rgb(232,182,51)" fg:x="97" fg:w="1"/><text x="46.4405%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (1 samples, 0.48%)</title><rect x="46.6667%" y="949" width="0.4762%" height="15" fill="rgb(231,60,39)" fg:x="98" fg:w="1"/><text x="46.9167%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.48%)</title><rect x="47.1429%" y="949" width="0.4762%" height="15" fill="rgb(208,69,12)" fg:x="99" fg:w="1"/><text x="47.3929%" y="959.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::new (1 samples, 0.48%)</title><rect x="47.6190%" y="949" width="0.4762%" height="15" fill="rgb(235,93,37)" fg:x="100" fg:w="1"/><text x="47.8690%" y="959.50"></text></g><g><title>[anon] (15 samples, 7.14%)</title><rect x="41.4286%" y="965" width="7.1429%" height="15" fill="rgb(213,116,39)" fg:x="87" fg:w="15"/><text x="41.6786%" y="975.50">[anon]</text></g><g><title>tokio::util::rand::FastRand::fastrand (1 samples, 0.48%)</title><rect x="48.0952%" y="949" width="0.4762%" height="15" fill="rgb(222,207,29)" fg:x="101" fg:w="1"/><text x="48.3452%" y="959.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.48%)</title><rect x="48.0952%" y="933" width="0.4762%" height="15" fill="rgb(206,96,30)" fg:x="101" fg:w="1"/><text x="48.3452%" y="943.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.48%)</title><rect x="48.5714%" y="949" width="0.4762%" height="15" fill="rgb(218,138,4)" fg:x="102" fg:w="1"/><text x="48.8214%" y="959.50"></text></g><g><title>[hopper] (3 samples, 1.43%)</title><rect x="48.5714%" y="965" width="1.4286%" height="15" fill="rgb(250,191,14)" fg:x="102" fg:w="3"/><text x="48.8214%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.95%)</title><rect x="49.0476%" y="949" width="0.9524%" height="15" fill="rgb(239,60,40)" fg:x="103" fg:w="2"/><text x="49.2976%" y="959.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.48%)</title><rect x="50.0000%" y="949" width="0.4762%" height="15" fill="rgb(206,27,48)" fg:x="105" fg:w="1"/><text x="50.2500%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="50.4762%" y="949" width="0.4762%" height="15" fill="rgb(225,35,8)" fg:x="106" fg:w="1"/><text x="50.7262%" y="959.50"></text></g><g><title>hopper::server::router::Destination::connect::{{closure}} (1 samples, 0.48%)</title><rect x="50.4762%" y="933" width="0.4762%" height="15" fill="rgb(250,213,24)" fg:x="106" fg:w="1"/><text x="50.7262%" y="943.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="50.4762%" y="917" width="0.4762%" height="15" fill="rgb(247,123,22)" fg:x="106" fg:w="1"/><text x="50.7262%" y="927.50"></text></g><g><title>hopper::server::router::Destination::connect::{{closure}}::{{closure}} (1 samples, 0.48%)</title><rect x="50.4762%" y="901" width="0.4762%" height="15" fill="rgb(231,138,38)" fg:x="106" fg:w="1"/><text x="50.7262%" y="911.50"></text></g><g><title>&lt;tokio::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="50.4762%" y="885" width="0.4762%" height="15" fill="rgb(231,145,46)" fg:x="106" fg:w="1"/><text x="50.7262%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="50.4762%" y="869" width="0.4762%" height="15" fill="rgb(251,118,11)" fg:x="106" fg:w="1"/><text x="50.7262%" y="879.50"></text></g><g><title>hopper::server::router::Destination::connect::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.48%)</title><rect x="50.4762%" y="853" width="0.4762%" height="15" fill="rgb(217,147,25)" fg:x="106" fg:w="1"/><text x="50.7262%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="50.4762%" y="837" width="0.4762%" height="15" fill="rgb(247,81,37)" fg:x="106" fg:w="1"/><text x="50.7262%" y="847.50"></text></g><g><title>tokio::io::util::copy::copy::{{closure}} (1 samples, 0.48%)</title><rect x="50.4762%" y="821" width="0.4762%" height="15" fill="rgb(209,12,38)" fg:x="106" fg:w="1"/><text x="50.7262%" y="831.50"></text></g><g><title>&lt;tokio::io::util::copy::Copy&lt;R,W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="50.4762%" y="805" width="0.4762%" height="15" fill="rgb(227,1,9)" fg:x="106" fg:w="1"/><text x="50.7262%" y="815.50"></text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_copy (1 samples, 0.48%)</title><rect x="50.4762%" y="789" width="0.4762%" height="15" fill="rgb(248,47,43)" fg:x="106" fg:w="1"/><text x="50.7262%" y="799.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.48%)</title><rect x="50.4762%" y="773" width="0.4762%" height="15" fill="rgb(221,10,30)" fg:x="106" fg:w="1"/><text x="50.7262%" y="783.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.48%)</title><rect x="50.4762%" y="757" width="0.4762%" height="15" fill="rgb(210,229,1)" fg:x="106" fg:w="1"/><text x="50.7262%" y="767.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.48%)</title><rect x="50.4762%" y="741" width="0.4762%" height="15" fill="rgb(222,148,37)" fg:x="106" fg:w="1"/><text x="50.7262%" y="751.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (1 samples, 0.48%)</title><rect x="50.4762%" y="725" width="0.4762%" height="15" fill="rgb(234,67,33)" fg:x="106" fg:w="1"/><text x="50.7262%" y="735.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1 samples, 0.48%)</title><rect x="50.4762%" y="709" width="0.4762%" height="15" fill="rgb(247,98,35)" fg:x="106" fg:w="1"/><text x="50.7262%" y="719.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.48%)</title><rect x="50.4762%" y="693" width="0.4762%" height="15" fill="rgb(247,138,52)" fg:x="106" fg:w="1"/><text x="50.7262%" y="703.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.48%)</title><rect x="50.4762%" y="677" width="0.4762%" height="15" fill="rgb(213,79,30)" fg:x="106" fg:w="1"/><text x="50.7262%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.95%)</title><rect x="50.9524%" y="949" width="0.9524%" height="15" fill="rgb(246,177,23)" fg:x="107" fg:w="2"/><text x="51.2024%" y="959.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.48%)</title><rect x="51.9048%" y="949" width="0.4762%" height="15" fill="rgb(230,62,27)" fg:x="109" fg:w="1"/><text x="52.1548%" y="959.50"></text></g><g><title>&lt;tokio::io::driver::ready::Ready as core::cmp::PartialEq&gt;::eq (1 samples, 0.48%)</title><rect x="52.3810%" y="949" width="0.4762%" height="15" fill="rgb(216,154,8)" fg:x="110" fg:w="1"/><text x="52.6310%" y="959.50"></text></g><g><title>__munmap (1 samples, 0.48%)</title><rect x="52.8571%" y="949" width="0.4762%" height="15" fill="rgb(244,35,45)" fg:x="111" fg:w="1"/><text x="53.1071%" y="959.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.48%)</title><rect x="53.3333%" y="949" width="0.4762%" height="15" fill="rgb(251,115,12)" fg:x="112" fg:w="1"/><text x="53.5833%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.48%)</title><rect x="53.8095%" y="949" width="0.4762%" height="15" fill="rgb(240,54,50)" fg:x="113" fg:w="1"/><text x="54.0595%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.48%)</title><rect x="54.2857%" y="949" width="0.4762%" height="15" fill="rgb(233,84,52)" fg:x="114" fg:w="1"/><text x="54.5357%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.48%)</title><rect x="54.7619%" y="949" width="0.4762%" height="15" fill="rgb(207,117,47)" fg:x="115" fg:w="1"/><text x="55.0119%" y="959.50"></text></g><g><title>core::ptr::read (2 samples, 0.95%)</title><rect x="55.2381%" y="949" width="0.9524%" height="15" fill="rgb(249,43,39)" fg:x="116" fg:w="2"/><text x="55.4881%" y="959.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.48%)</title><rect x="56.1905%" y="949" width="0.4762%" height="15" fill="rgb(209,38,44)" fg:x="118" fg:w="1"/><text x="56.4405%" y="959.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.48%)</title><rect x="56.6667%" y="949" width="0.4762%" height="15" fill="rgb(236,212,23)" fg:x="119" fg:w="1"/><text x="56.9167%" y="959.50"></text></g><g><title>[hopper] (1 samples, 0.48%)</title><rect x="57.6190%" y="677" width="0.4762%" height="15" fill="rgb(242,79,21)" fg:x="121" fg:w="1"/><text x="57.8690%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.48%)</title><rect x="57.6190%" y="661" width="0.4762%" height="15" fill="rgb(211,96,35)" fg:x="121" fg:w="1"/><text x="57.8690%" y="671.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="58.5714%" y="661" width="0.4762%" height="15" fill="rgb(253,215,40)" fg:x="123" fg:w="1"/><text x="58.8214%" y="671.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (3 samples, 1.43%)</title><rect x="58.0952%" y="677" width="1.4286%" height="15" fill="rgb(211,81,21)" fg:x="122" fg:w="3"/><text x="58.3452%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (1 samples, 0.48%)</title><rect x="59.0476%" y="661" width="0.4762%" height="15" fill="rgb(208,190,38)" fg:x="124" fg:w="1"/><text x="59.2976%" y="671.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (1 samples, 0.48%)</title><rect x="59.0476%" y="645" width="0.4762%" height="15" fill="rgb(235,213,38)" fg:x="124" fg:w="1"/><text x="59.2976%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.48%)</title><rect x="59.0476%" y="629" width="0.4762%" height="15" fill="rgb(237,122,38)" fg:x="124" fg:w="1"/><text x="59.2976%" y="639.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.48%)</title><rect x="59.5238%" y="661" width="0.4762%" height="15" fill="rgb(244,218,35)" fg:x="125" fg:w="1"/><text x="59.7738%" y="671.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 0.48%)</title><rect x="59.5238%" y="645" width="0.4762%" height="15" fill="rgb(240,68,47)" fg:x="125" fg:w="1"/><text x="59.7738%" y="655.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (1 samples, 0.48%)</title><rect x="59.5238%" y="629" width="0.4762%" height="15" fill="rgb(210,16,53)" fg:x="125" fg:w="1"/><text x="59.7738%" y="639.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (1 samples, 0.48%)</title><rect x="59.5238%" y="613" width="0.4762%" height="15" fill="rgb(235,124,12)" fg:x="125" fg:w="1"/><text x="59.7738%" y="623.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.48%)</title><rect x="59.5238%" y="597" width="0.4762%" height="15" fill="rgb(224,169,11)" fg:x="125" fg:w="1"/><text x="59.7738%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.48%)</title><rect x="59.5238%" y="581" width="0.4762%" height="15" fill="rgb(250,166,2)" fg:x="125" fg:w="1"/><text x="59.7738%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.48%)</title><rect x="59.5238%" y="565" width="0.4762%" height="15" fill="rgb(242,216,29)" fg:x="125" fg:w="1"/><text x="59.7738%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.48%)</title><rect x="59.5238%" y="549" width="0.4762%" height="15" fill="rgb(230,116,27)" fg:x="125" fg:w="1"/><text x="59.7738%" y="559.50"></text></g><g><title>recv (1 samples, 0.48%)</title><rect x="59.5238%" y="533" width="0.4762%" height="15" fill="rgb(228,99,48)" fg:x="125" fg:w="1"/><text x="59.7738%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.48%)</title><rect x="59.5238%" y="517" width="0.4762%" height="15" fill="rgb(253,11,6)" fg:x="125" fg:w="1"/><text x="59.7738%" y="527.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 2.86%)</title><rect x="57.6190%" y="757" width="2.8571%" height="15" fill="rgb(247,143,39)" fg:x="121" fg:w="6"/><text x="57.8690%" y="767.50">&lt;t..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (6 samples, 2.86%)</title><rect x="57.6190%" y="741" width="2.8571%" height="15" fill="rgb(236,97,10)" fg:x="121" fg:w="6"/><text x="57.8690%" y="751.50">to..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (6 samples, 2.86%)</title><rect x="57.6190%" y="725" width="2.8571%" height="15" fill="rgb(233,208,19)" fg:x="121" fg:w="6"/><text x="57.8690%" y="735.50">to..</text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (6 samples, 2.86%)</title><rect x="57.6190%" y="709" width="2.8571%" height="15" fill="rgb(216,164,2)" fg:x="121" fg:w="6"/><text x="57.8690%" y="719.50">to..</text></g><g><title>tokio::io::driver::registration::Registration::poll_io (6 samples, 2.86%)</title><rect x="57.6190%" y="693" width="2.8571%" height="15" fill="rgb(220,129,5)" fg:x="121" fg:w="6"/><text x="57.8690%" y="703.50">to..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (2 samples, 0.95%)</title><rect x="59.5238%" y="677" width="0.9524%" height="15" fill="rgb(242,17,10)" fg:x="125" fg:w="2"/><text x="59.7738%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.48%)</title><rect x="60.0000%" y="661" width="0.4762%" height="15" fill="rgb(242,107,0)" fg:x="126" fg:w="1"/><text x="60.2500%" y="671.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.48%)</title><rect x="60.4762%" y="757" width="0.4762%" height="15" fill="rgb(251,28,31)" fg:x="127" fg:w="1"/><text x="60.7262%" y="767.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 0.48%)</title><rect x="60.4762%" y="741" width="0.4762%" height="15" fill="rgb(233,223,10)" fg:x="127" fg:w="1"/><text x="60.7262%" y="751.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.48%)</title><rect x="60.4762%" y="725" width="0.4762%" height="15" fill="rgb(215,21,27)" fg:x="127" fg:w="1"/><text x="60.7262%" y="735.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (1 samples, 0.48%)</title><rect x="60.4762%" y="709" width="0.4762%" height="15" fill="rgb(232,23,21)" fg:x="127" fg:w="1"/><text x="60.7262%" y="719.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1 samples, 0.48%)</title><rect x="60.4762%" y="693" width="0.4762%" height="15" fill="rgb(244,5,23)" fg:x="127" fg:w="1"/><text x="60.7262%" y="703.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::{{closure}} (1 samples, 0.48%)</title><rect x="60.4762%" y="677" width="0.4762%" height="15" fill="rgb(226,81,46)" fg:x="127" fg:w="1"/><text x="60.7262%" y="687.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 0.48%)</title><rect x="60.4762%" y="661" width="0.4762%" height="15" fill="rgb(247,70,30)" fg:x="127" fg:w="1"/><text x="60.7262%" y="671.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 0.48%)</title><rect x="60.4762%" y="645" width="0.4762%" height="15" fill="rgb(212,68,19)" fg:x="127" fg:w="1"/><text x="60.7262%" y="655.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (1 samples, 0.48%)</title><rect x="60.4762%" y="629" width="0.4762%" height="15" fill="rgb(240,187,13)" fg:x="127" fg:w="1"/><text x="60.7262%" y="639.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (1 samples, 0.48%)</title><rect x="60.4762%" y="613" width="0.4762%" height="15" fill="rgb(223,113,26)" fg:x="127" fg:w="1"/><text x="60.7262%" y="623.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.48%)</title><rect x="60.4762%" y="597" width="0.4762%" height="15" fill="rgb(206,192,2)" fg:x="127" fg:w="1"/><text x="60.7262%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.48%)</title><rect x="60.4762%" y="581" width="0.4762%" height="15" fill="rgb(241,108,4)" fg:x="127" fg:w="1"/><text x="60.7262%" y="591.50"></text></g><g><title>__send (1 samples, 0.48%)</title><rect x="60.4762%" y="565" width="0.4762%" height="15" fill="rgb(247,173,49)" fg:x="127" fg:w="1"/><text x="60.7262%" y="575.50"></text></g><g><title>hopper::server::Server&lt;R&gt;::listen::{{closure}}::{{closure}} (9 samples, 4.29%)</title><rect x="57.1429%" y="949" width="4.2857%" height="15" fill="rgb(224,114,35)" fg:x="120" fg:w="9"/><text x="57.3929%" y="959.50">hoppe..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 4.29%)</title><rect x="57.1429%" y="933" width="4.2857%" height="15" fill="rgb(245,159,27)" fg:x="120" fg:w="9"/><text x="57.3929%" y="943.50">&lt;core..</text></g><g><title>hopper::server::router::Destination::connect::{{closure}} (9 samples, 4.29%)</title><rect x="57.1429%" y="917" width="4.2857%" height="15" fill="rgb(245,172,44)" fg:x="120" fg:w="9"/><text x="57.3929%" y="927.50">hoppe..</text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (9 samples, 4.29%)</title><rect x="57.1429%" y="901" width="4.2857%" height="15" fill="rgb(236,23,11)" fg:x="120" fg:w="9"/><text x="57.3929%" y="911.50">&lt;toki..</text></g><g><title>hopper::server::router::Destination::connect::{{closure}}::{{closure}} (9 samples, 4.29%)</title><rect x="57.1429%" y="885" width="4.2857%" height="15" fill="rgb(205,117,38)" fg:x="120" fg:w="9"/><text x="57.3929%" y="895.50">hoppe..</text></g><g><title>&lt;tokio::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (9 samples, 4.29%)</title><rect x="57.1429%" y="869" width="4.2857%" height="15" fill="rgb(237,72,25)" fg:x="120" fg:w="9"/><text x="57.3929%" y="879.50">&lt;toki..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 4.29%)</title><rect x="57.1429%" y="853" width="4.2857%" height="15" fill="rgb(244,70,9)" fg:x="120" fg:w="9"/><text x="57.3929%" y="863.50">&lt;core..</text></g><g><title>hopper::server::router::Destination::connect::{{closure}}::{{closure}}::{{closure}} (9 samples, 4.29%)</title><rect x="57.1429%" y="837" width="4.2857%" height="15" fill="rgb(217,125,39)" fg:x="120" fg:w="9"/><text x="57.3929%" y="847.50">hoppe..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 4.29%)</title><rect x="57.1429%" y="821" width="4.2857%" height="15" fill="rgb(235,36,10)" fg:x="120" fg:w="9"/><text x="57.3929%" y="831.50">&lt;core..</text></g><g><title>tokio::io::util::copy::copy::{{closure}} (9 samples, 4.29%)</title><rect x="57.1429%" y="805" width="4.2857%" height="15" fill="rgb(251,123,47)" fg:x="120" fg:w="9"/><text x="57.3929%" y="815.50">tokio..</text></g><g><title>&lt;tokio::io::util::copy::Copy&lt;R,W&gt; as core::future::future::Future&gt;::poll (9 samples, 4.29%)</title><rect x="57.1429%" y="789" width="4.2857%" height="15" fill="rgb(221,13,13)" fg:x="120" fg:w="9"/><text x="57.3929%" y="799.50">&lt;toki..</text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_copy (9 samples, 4.29%)</title><rect x="57.1429%" y="773" width="4.2857%" height="15" fill="rgb(238,131,9)" fg:x="120" fg:w="9"/><text x="57.3929%" y="783.50">tokio..</text></g><g><title>tokio::io::read_buf::ReadBuf::filled (1 samples, 0.48%)</title><rect x="60.9524%" y="757" width="0.4762%" height="15" fill="rgb(211,50,8)" fg:x="128" fg:w="1"/><text x="61.2024%" y="767.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.48%)</title><rect x="60.9524%" y="741" width="0.4762%" height="15" fill="rgb(245,182,24)" fg:x="128" fg:w="1"/><text x="61.2024%" y="751.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.48%)</title><rect x="60.9524%" y="725" width="0.4762%" height="15" fill="rgb(242,14,37)" fg:x="128" fg:w="1"/><text x="61.2024%" y="735.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.48%)</title><rect x="60.9524%" y="709" width="0.4762%" height="15" fill="rgb(246,228,12)" fg:x="128" fg:w="1"/><text x="61.2024%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.48%)</title><rect x="60.9524%" y="693" width="0.4762%" height="15" fill="rgb(213,55,15)" fg:x="128" fg:w="1"/><text x="61.2024%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.48%)</title><rect x="60.9524%" y="677" width="0.4762%" height="15" fill="rgb(209,9,3)" fg:x="128" fg:w="1"/><text x="61.2024%" y="687.50"></text></g><g><title>hopper::server::router::Destination::connect::{{closure}} (1 samples, 0.48%)</title><rect x="61.4286%" y="949" width="0.4762%" height="15" fill="rgb(230,59,30)" fg:x="129" fg:w="1"/><text x="61.6786%" y="959.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1 samples, 0.48%)</title><rect x="61.9048%" y="949" width="0.4762%" height="15" fill="rgb(209,121,21)" fg:x="130" fg:w="1"/><text x="62.1548%" y="959.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="62.3810%" y="229" width="0.4762%" height="15" fill="rgb(220,109,13)" fg:x="131" fg:w="1"/><text x="62.6310%" y="239.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="62.3810%" y="213" width="0.4762%" height="15" fill="rgb(232,18,1)" fg:x="131" fg:w="1"/><text x="62.6310%" y="223.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="62.3810%" y="197" width="0.4762%" height="15" fill="rgb(215,41,42)" fg:x="131" fg:w="1"/><text x="62.6310%" y="207.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="62.3810%" y="181" width="0.4762%" height="15" fill="rgb(224,123,36)" fg:x="131" fg:w="1"/><text x="62.6310%" y="191.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.48%)</title><rect x="62.3810%" y="165" width="0.4762%" height="15" fill="rgb(240,125,3)" fg:x="131" fg:w="1"/><text x="62.6310%" y="175.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (1 samples, 0.48%)</title><rect x="62.3810%" y="149" width="0.4762%" height="15" fill="rgb(205,98,50)" fg:x="131" fg:w="1"/><text x="62.6310%" y="159.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (1 samples, 0.48%)</title><rect x="62.3810%" y="133" width="0.4762%" height="15" fill="rgb(205,185,37)" fg:x="131" fg:w="1"/><text x="62.6310%" y="143.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (1 samples, 0.48%)</title><rect x="62.3810%" y="117" width="0.4762%" height="15" fill="rgb(238,207,15)" fg:x="131" fg:w="1"/><text x="62.6310%" y="127.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.48%)</title><rect x="62.3810%" y="101" width="0.4762%" height="15" fill="rgb(213,199,42)" fg:x="131" fg:w="1"/><text x="62.6310%" y="111.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.48%)</title><rect x="62.3810%" y="85" width="0.4762%" height="15" fill="rgb(235,201,11)" fg:x="131" fg:w="1"/><text x="62.6310%" y="95.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.48%)</title><rect x="62.3810%" y="69" width="0.4762%" height="15" fill="rgb(207,46,11)" fg:x="131" fg:w="1"/><text x="62.6310%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.48%)</title><rect x="62.3810%" y="53" width="0.4762%" height="15" fill="rgb(241,35,35)" fg:x="131" fg:w="1"/><text x="62.6310%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.48%)</title><rect x="62.3810%" y="37" width="0.4762%" height="15" fill="rgb(243,32,47)" fg:x="131" fg:w="1"/><text x="62.6310%" y="47.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.95%)</title><rect x="62.3810%" y="949" width="0.9524%" height="15" fill="rgb(247,202,23)" fg:x="131" fg:w="2"/><text x="62.6310%" y="959.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.95%)</title><rect x="62.3810%" y="933" width="0.9524%" height="15" fill="rgb(219,102,11)" fg:x="131" fg:w="2"/><text x="62.6310%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.95%)</title><rect x="62.3810%" y="917" width="0.9524%" height="15" fill="rgb(243,110,44)" fg:x="131" fg:w="2"/><text x="62.6310%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.95%)</title><rect x="62.3810%" y="901" width="0.9524%" height="15" fill="rgb(222,74,54)" fg:x="131" fg:w="2"/><text x="62.6310%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="885" width="0.9524%" height="15" fill="rgb(216,99,12)" fg:x="131" fg:w="2"/><text x="62.6310%" y="895.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.95%)</title><rect x="62.3810%" y="869" width="0.9524%" height="15" fill="rgb(226,22,26)" fg:x="131" fg:w="2"/><text x="62.6310%" y="879.50"></text></g><g><title>std::panicking::try (2 samples, 0.95%)</title><rect x="62.3810%" y="853" width="0.9524%" height="15" fill="rgb(217,163,10)" fg:x="131" fg:w="2"/><text x="62.6310%" y="863.50"></text></g><g><title>__rust_try (2 samples, 0.95%)</title><rect x="62.3810%" y="837" width="0.9524%" height="15" fill="rgb(213,25,53)" fg:x="131" fg:w="2"/><text x="62.6310%" y="847.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.95%)</title><rect x="62.3810%" y="821" width="0.9524%" height="15" fill="rgb(252,105,26)" fg:x="131" fg:w="2"/><text x="62.6310%" y="831.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.95%)</title><rect x="62.3810%" y="805" width="0.9524%" height="15" fill="rgb(220,39,43)" fg:x="131" fg:w="2"/><text x="62.6310%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="789" width="0.9524%" height="15" fill="rgb(229,68,48)" fg:x="131" fg:w="2"/><text x="62.6310%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.95%)</title><rect x="62.3810%" y="773" width="0.9524%" height="15" fill="rgb(252,8,32)" fg:x="131" fg:w="2"/><text x="62.6310%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="757" width="0.9524%" height="15" fill="rgb(223,20,43)" fg:x="131" fg:w="2"/><text x="62.6310%" y="767.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 0.95%)</title><rect x="62.3810%" y="741" width="0.9524%" height="15" fill="rgb(229,81,49)" fg:x="131" fg:w="2"/><text x="62.6310%" y="751.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (2 samples, 0.95%)</title><rect x="62.3810%" y="725" width="0.9524%" height="15" fill="rgb(236,28,36)" fg:x="131" fg:w="2"/><text x="62.6310%" y="735.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2 samples, 0.95%)</title><rect x="62.3810%" y="709" width="0.9524%" height="15" fill="rgb(249,185,26)" fg:x="131" fg:w="2"/><text x="62.6310%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.95%)</title><rect x="62.3810%" y="693" width="0.9524%" height="15" fill="rgb(249,174,33)" fg:x="131" fg:w="2"/><text x="62.6310%" y="703.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.95%)</title><rect x="62.3810%" y="677" width="0.9524%" height="15" fill="rgb(233,201,37)" fg:x="131" fg:w="2"/><text x="62.6310%" y="687.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.95%)</title><rect x="62.3810%" y="661" width="0.9524%" height="15" fill="rgb(221,78,26)" fg:x="131" fg:w="2"/><text x="62.6310%" y="671.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 0.95%)</title><rect x="62.3810%" y="645" width="0.9524%" height="15" fill="rgb(250,127,30)" fg:x="131" fg:w="2"/><text x="62.6310%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 0.95%)</title><rect x="62.3810%" y="629" width="0.9524%" height="15" fill="rgb(230,49,44)" fg:x="131" fg:w="2"/><text x="62.6310%" y="639.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.95%)</title><rect x="62.3810%" y="613" width="0.9524%" height="15" fill="rgb(229,67,23)" fg:x="131" fg:w="2"/><text x="62.6310%" y="623.50"></text></g><g><title>std::panicking::try (2 samples, 0.95%)</title><rect x="62.3810%" y="597" width="0.9524%" height="15" fill="rgb(249,83,47)" fg:x="131" fg:w="2"/><text x="62.6310%" y="607.50"></text></g><g><title>__rust_try (2 samples, 0.95%)</title><rect x="62.3810%" y="581" width="0.9524%" height="15" fill="rgb(215,43,3)" fg:x="131" fg:w="2"/><text x="62.6310%" y="591.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.95%)</title><rect x="62.3810%" y="565" width="0.9524%" height="15" fill="rgb(238,154,13)" fg:x="131" fg:w="2"/><text x="62.6310%" y="575.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.95%)</title><rect x="62.3810%" y="549" width="0.9524%" height="15" fill="rgb(219,56,2)" fg:x="131" fg:w="2"/><text x="62.6310%" y="559.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="533" width="0.9524%" height="15" fill="rgb(233,0,4)" fg:x="131" fg:w="2"/><text x="62.6310%" y="543.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 0.95%)</title><rect x="62.3810%" y="517" width="0.9524%" height="15" fill="rgb(235,30,7)" fg:x="131" fg:w="2"/><text x="62.6310%" y="527.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.95%)</title><rect x="62.3810%" y="501" width="0.9524%" height="15" fill="rgb(250,79,13)" fg:x="131" fg:w="2"/><text x="62.6310%" y="511.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="485" width="0.9524%" height="15" fill="rgb(211,146,34)" fg:x="131" fg:w="2"/><text x="62.6310%" y="495.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.95%)</title><rect x="62.3810%" y="469" width="0.9524%" height="15" fill="rgb(228,22,38)" fg:x="131" fg:w="2"/><text x="62.6310%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="453" width="0.9524%" height="15" fill="rgb(235,168,5)" fg:x="131" fg:w="2"/><text x="62.6310%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2 samples, 0.95%)</title><rect x="62.3810%" y="437" width="0.9524%" height="15" fill="rgb(221,155,16)" fg:x="131" fg:w="2"/><text x="62.6310%" y="447.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 0.95%)</title><rect x="62.3810%" y="421" width="0.9524%" height="15" fill="rgb(215,215,53)" fg:x="131" fg:w="2"/><text x="62.6310%" y="431.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2 samples, 0.95%)</title><rect x="62.3810%" y="405" width="0.9524%" height="15" fill="rgb(223,4,10)" fg:x="131" fg:w="2"/><text x="62.6310%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2 samples, 0.95%)</title><rect x="62.3810%" y="389" width="0.9524%" height="15" fill="rgb(234,103,6)" fg:x="131" fg:w="2"/><text x="62.6310%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (2 samples, 0.95%)</title><rect x="62.3810%" y="373" width="0.9524%" height="15" fill="rgb(227,97,0)" fg:x="131" fg:w="2"/><text x="62.6310%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 0.95%)</title><rect x="62.3810%" y="357" width="0.9524%" height="15" fill="rgb(234,150,53)" fg:x="131" fg:w="2"/><text x="62.6310%" y="367.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="62.3810%" y="341" width="0.9524%" height="15" fill="rgb(228,201,54)" fg:x="131" fg:w="2"/><text x="62.6310%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (2 samples, 0.95%)</title><rect x="62.3810%" y="325" width="0.9524%" height="15" fill="rgb(222,22,37)" fg:x="131" fg:w="2"/><text x="62.6310%" y="335.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (2 samples, 0.95%)</title><rect x="62.3810%" y="309" width="0.9524%" height="15" fill="rgb(237,53,32)" fg:x="131" fg:w="2"/><text x="62.6310%" y="319.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="62.3810%" y="293" width="0.9524%" height="15" fill="rgb(233,25,53)" fg:x="131" fg:w="2"/><text x="62.6310%" y="303.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="62.3810%" y="277" width="0.9524%" height="15" fill="rgb(210,40,34)" fg:x="131" fg:w="2"/><text x="62.6310%" y="287.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="62.3810%" y="261" width="0.9524%" height="15" fill="rgb(241,220,44)" fg:x="131" fg:w="2"/><text x="62.6310%" y="271.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 0.95%)</title><rect x="62.3810%" y="245" width="0.9524%" height="15" fill="rgb(235,28,35)" fg:x="131" fg:w="2"/><text x="62.6310%" y="255.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (1 samples, 0.48%)</title><rect x="62.8571%" y="229" width="0.4762%" height="15" fill="rgb(210,56,17)" fg:x="132" fg:w="1"/><text x="63.1071%" y="239.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.48%)</title><rect x="62.8571%" y="213" width="0.4762%" height="15" fill="rgb(224,130,29)" fg:x="132" fg:w="1"/><text x="63.1071%" y="223.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (1 samples, 0.48%)</title><rect x="62.8571%" y="197" width="0.4762%" height="15" fill="rgb(235,212,8)" fg:x="132" fg:w="1"/><text x="63.1071%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (1 samples, 0.48%)</title><rect x="62.8571%" y="181" width="0.4762%" height="15" fill="rgb(223,33,50)" fg:x="132" fg:w="1"/><text x="63.1071%" y="191.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="949" width="0.4762%" height="15" fill="rgb(219,149,13)" fg:x="133" fg:w="1"/><text x="63.5833%" y="959.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.48%)</title><rect x="63.3333%" y="933" width="0.4762%" height="15" fill="rgb(250,156,29)" fg:x="133" fg:w="1"/><text x="63.5833%" y="943.50"></text></g><g><title>std::panicking::try (1 samples, 0.48%)</title><rect x="63.3333%" y="917" width="0.4762%" height="15" fill="rgb(216,193,19)" fg:x="133" fg:w="1"/><text x="63.5833%" y="927.50"></text></g><g><title>__rust_try (1 samples, 0.48%)</title><rect x="63.3333%" y="901" width="0.4762%" height="15" fill="rgb(216,135,14)" fg:x="133" fg:w="1"/><text x="63.5833%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.48%)</title><rect x="63.3333%" y="885" width="0.4762%" height="15" fill="rgb(241,47,5)" fg:x="133" fg:w="1"/><text x="63.5833%" y="895.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.48%)</title><rect x="63.3333%" y="869" width="0.4762%" height="15" fill="rgb(233,42,35)" fg:x="133" fg:w="1"/><text x="63.5833%" y="879.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="853" width="0.4762%" height="15" fill="rgb(231,13,6)" fg:x="133" fg:w="1"/><text x="63.5833%" y="863.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.48%)</title><rect x="63.3333%" y="837" width="0.4762%" height="15" fill="rgb(207,181,40)" fg:x="133" fg:w="1"/><text x="63.5833%" y="847.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="821" width="0.4762%" height="15" fill="rgb(254,173,49)" fg:x="133" fg:w="1"/><text x="63.5833%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.48%)</title><rect x="63.3333%" y="805" width="0.4762%" height="15" fill="rgb(221,1,38)" fg:x="133" fg:w="1"/><text x="63.5833%" y="815.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (1 samples, 0.48%)</title><rect x="63.3333%" y="789" width="0.4762%" height="15" fill="rgb(206,124,46)" fg:x="133" fg:w="1"/><text x="63.5833%" y="799.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.48%)</title><rect x="63.3333%" y="773" width="0.4762%" height="15" fill="rgb(249,21,11)" fg:x="133" fg:w="1"/><text x="63.5833%" y="783.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.48%)</title><rect x="63.3333%" y="757" width="0.4762%" height="15" fill="rgb(222,201,40)" fg:x="133" fg:w="1"/><text x="63.5833%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.48%)</title><rect x="63.3333%" y="741" width="0.4762%" height="15" fill="rgb(235,61,29)" fg:x="133" fg:w="1"/><text x="63.5833%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.48%)</title><rect x="63.3333%" y="725" width="0.4762%" height="15" fill="rgb(219,207,3)" fg:x="133" fg:w="1"/><text x="63.5833%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.48%)</title><rect x="63.3333%" y="709" width="0.4762%" height="15" fill="rgb(222,56,46)" fg:x="133" fg:w="1"/><text x="63.5833%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.48%)</title><rect x="63.3333%" y="693" width="0.4762%" height="15" fill="rgb(239,76,54)" fg:x="133" fg:w="1"/><text x="63.5833%" y="703.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.48%)</title><rect x="63.3333%" y="677" width="0.4762%" height="15" fill="rgb(231,124,27)" fg:x="133" fg:w="1"/><text x="63.5833%" y="687.50"></text></g><g><title>std::panicking::try (1 samples, 0.48%)</title><rect x="63.3333%" y="661" width="0.4762%" height="15" fill="rgb(249,195,6)" fg:x="133" fg:w="1"/><text x="63.5833%" y="671.50"></text></g><g><title>__rust_try (1 samples, 0.48%)</title><rect x="63.3333%" y="645" width="0.4762%" height="15" fill="rgb(237,174,47)" fg:x="133" fg:w="1"/><text x="63.5833%" y="655.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.48%)</title><rect x="63.3333%" y="629" width="0.4762%" height="15" fill="rgb(206,201,31)" fg:x="133" fg:w="1"/><text x="63.5833%" y="639.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.48%)</title><rect x="63.3333%" y="613" width="0.4762%" height="15" fill="rgb(231,57,52)" fg:x="133" fg:w="1"/><text x="63.5833%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="597" width="0.4762%" height="15" fill="rgb(248,177,22)" fg:x="133" fg:w="1"/><text x="63.5833%" y="607.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.48%)</title><rect x="63.3333%" y="581" width="0.4762%" height="15" fill="rgb(215,211,37)" fg:x="133" fg:w="1"/><text x="63.5833%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.48%)</title><rect x="63.3333%" y="565" width="0.4762%" height="15" fill="rgb(241,128,51)" fg:x="133" fg:w="1"/><text x="63.5833%" y="575.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="549" width="0.4762%" height="15" fill="rgb(227,165,31)" fg:x="133" fg:w="1"/><text x="63.5833%" y="559.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="63.3333%" y="533" width="0.4762%" height="15" fill="rgb(228,167,24)" fg:x="133" fg:w="1"/><text x="63.5833%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="517" width="0.4762%" height="15" fill="rgb(228,143,12)" fg:x="133" fg:w="1"/><text x="63.5833%" y="527.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.48%)</title><rect x="63.3333%" y="501" width="0.4762%" height="15" fill="rgb(249,149,8)" fg:x="133" fg:w="1"/><text x="63.5833%" y="511.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.48%)</title><rect x="63.3333%" y="485" width="0.4762%" height="15" fill="rgb(243,35,44)" fg:x="133" fg:w="1"/><text x="63.5833%" y="495.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.48%)</title><rect x="63.3333%" y="469" width="0.4762%" height="15" fill="rgb(246,89,9)" fg:x="133" fg:w="1"/><text x="63.5833%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.48%)</title><rect x="63.3333%" y="453" width="0.4762%" height="15" fill="rgb(233,213,13)" fg:x="133" fg:w="1"/><text x="63.5833%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1 samples, 0.48%)</title><rect x="63.3333%" y="437" width="0.4762%" height="15" fill="rgb(233,141,41)" fg:x="133" fg:w="1"/><text x="63.5833%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.48%)</title><rect x="63.3333%" y="421" width="0.4762%" height="15" fill="rgb(239,167,4)" fg:x="133" fg:w="1"/><text x="63.5833%" y="431.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="63.3333%" y="405" width="0.4762%" height="15" fill="rgb(209,217,16)" fg:x="133" fg:w="1"/><text x="63.5833%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (1 samples, 0.48%)</title><rect x="63.3333%" y="389" width="0.4762%" height="15" fill="rgb(219,88,35)" fg:x="133" fg:w="1"/><text x="63.5833%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (1 samples, 0.48%)</title><rect x="63.3333%" y="373" width="0.4762%" height="15" fill="rgb(220,193,23)" fg:x="133" fg:w="1"/><text x="63.5833%" y="383.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="63.3333%" y="357" width="0.4762%" height="15" fill="rgb(230,90,52)" fg:x="133" fg:w="1"/><text x="63.5833%" y="367.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="63.3333%" y="341" width="0.4762%" height="15" fill="rgb(252,106,19)" fg:x="133" fg:w="1"/><text x="63.5833%" y="351.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1 samples, 0.48%)</title><rect x="63.3333%" y="325" width="0.4762%" height="15" fill="rgb(206,74,20)" fg:x="133" fg:w="1"/><text x="63.5833%" y="335.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.48%)</title><rect x="63.3333%" y="309" width="0.4762%" height="15" fill="rgb(230,138,44)" fg:x="133" fg:w="1"/><text x="63.5833%" y="319.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (1 samples, 0.48%)</title><rect x="63.3333%" y="293" width="0.4762%" height="15" fill="rgb(235,182,43)" fg:x="133" fg:w="1"/><text x="63.5833%" y="303.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.48%)</title><rect x="63.3333%" y="277" width="0.4762%" height="15" fill="rgb(242,16,51)" fg:x="133" fg:w="1"/><text x="63.5833%" y="287.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (1 samples, 0.48%)</title><rect x="63.3333%" y="261" width="0.4762%" height="15" fill="rgb(248,9,4)" fg:x="133" fg:w="1"/><text x="63.5833%" y="271.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.48%)</title><rect x="63.3333%" y="245" width="0.4762%" height="15" fill="rgb(210,31,22)" fg:x="133" fg:w="1"/><text x="63.5833%" y="255.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (1 samples, 0.48%)</title><rect x="63.3333%" y="229" width="0.4762%" height="15" fill="rgb(239,54,39)" fg:x="133" fg:w="1"/><text x="63.5833%" y="239.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_occupied_slot (1 samples, 0.48%)</title><rect x="63.3333%" y="213" width="0.4762%" height="15" fill="rgb(230,99,41)" fg:x="133" fg:w="1"/><text x="63.5833%" y="223.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.48%)</title><rect x="63.8095%" y="949" width="0.4762%" height="15" fill="rgb(253,106,12)" fg:x="134" fg:w="1"/><text x="64.0595%" y="959.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.48%)</title><rect x="64.2857%" y="949" width="0.4762%" height="15" fill="rgb(213,46,41)" fg:x="135" fg:w="1"/><text x="64.5357%" y="959.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 0.95%)</title><rect x="64.7619%" y="949" width="0.9524%" height="15" fill="rgb(215,133,35)" fg:x="136" fg:w="2"/><text x="65.0119%" y="959.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (2 samples, 0.95%)</title><rect x="64.7619%" y="933" width="0.9524%" height="15" fill="rgb(213,28,5)" fg:x="136" fg:w="2"/><text x="65.0119%" y="943.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2 samples, 0.95%)</title><rect x="64.7619%" y="917" width="0.9524%" height="15" fill="rgb(215,77,49)" fg:x="136" fg:w="2"/><text x="65.0119%" y="927.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.95%)</title><rect x="64.7619%" y="901" width="0.9524%" height="15" fill="rgb(248,100,22)" fg:x="136" fg:w="2"/><text x="65.0119%" y="911.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.95%)</title><rect x="64.7619%" y="885" width="0.9524%" height="15" fill="rgb(208,67,9)" fg:x="136" fg:w="2"/><text x="65.0119%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.95%)</title><rect x="64.7619%" y="869" width="0.9524%" height="15" fill="rgb(219,133,21)" fg:x="136" fg:w="2"/><text x="65.0119%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 0.95%)</title><rect x="64.7619%" y="853" width="0.9524%" height="15" fill="rgb(246,46,29)" fg:x="136" fg:w="2"/><text x="65.0119%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 0.95%)</title><rect x="64.7619%" y="837" width="0.9524%" height="15" fill="rgb(246,185,52)" fg:x="136" fg:w="2"/><text x="65.0119%" y="847.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.95%)</title><rect x="64.7619%" y="821" width="0.9524%" height="15" fill="rgb(252,136,11)" fg:x="136" fg:w="2"/><text x="65.0119%" y="831.50"></text></g><g><title>std::panicking::try (2 samples, 0.95%)</title><rect x="64.7619%" y="805" width="0.9524%" height="15" fill="rgb(219,138,53)" fg:x="136" fg:w="2"/><text x="65.0119%" y="815.50"></text></g><g><title>__rust_try (2 samples, 0.95%)</title><rect x="64.7619%" y="789" width="0.9524%" height="15" fill="rgb(211,51,23)" fg:x="136" fg:w="2"/><text x="65.0119%" y="799.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.95%)</title><rect x="64.7619%" y="773" width="0.9524%" height="15" fill="rgb(247,221,28)" fg:x="136" fg:w="2"/><text x="65.0119%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.95%)</title><rect x="64.7619%" y="757" width="0.9524%" height="15" fill="rgb(251,222,45)" fg:x="136" fg:w="2"/><text x="65.0119%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 0.95%)</title><rect x="64.7619%" y="741" width="0.9524%" height="15" fill="rgb(217,162,53)" fg:x="136" fg:w="2"/><text x="65.0119%" y="751.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 0.95%)</title><rect x="64.7619%" y="725" width="0.9524%" height="15" fill="rgb(229,93,14)" fg:x="136" fg:w="2"/><text x="65.0119%" y="735.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.95%)</title><rect x="64.7619%" y="709" width="0.9524%" height="15" fill="rgb(209,67,49)" fg:x="136" fg:w="2"/><text x="65.0119%" y="719.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 0.95%)</title><rect x="64.7619%" y="693" width="0.9524%" height="15" fill="rgb(213,87,29)" fg:x="136" fg:w="2"/><text x="65.0119%" y="703.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.95%)</title><rect x="64.7619%" y="677" width="0.9524%" height="15" fill="rgb(205,151,52)" fg:x="136" fg:w="2"/><text x="65.0119%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2 samples, 0.95%)</title><rect x="64.7619%" y="661" width="0.9524%" height="15" fill="rgb(253,215,39)" fg:x="136" fg:w="2"/><text x="65.0119%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2 samples, 0.95%)</title><rect x="64.7619%" y="645" width="0.9524%" height="15" fill="rgb(221,220,41)" fg:x="136" fg:w="2"/><text x="65.0119%" y="655.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 0.95%)</title><rect x="64.7619%" y="629" width="0.9524%" height="15" fill="rgb(218,133,21)" fg:x="136" fg:w="2"/><text x="65.0119%" y="639.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2 samples, 0.95%)</title><rect x="64.7619%" y="613" width="0.9524%" height="15" fill="rgb(221,193,43)" fg:x="136" fg:w="2"/><text x="65.0119%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2 samples, 0.95%)</title><rect x="64.7619%" y="597" width="0.9524%" height="15" fill="rgb(240,128,52)" fg:x="136" fg:w="2"/><text x="65.0119%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (2 samples, 0.95%)</title><rect x="64.7619%" y="581" width="0.9524%" height="15" fill="rgb(253,114,12)" fg:x="136" fg:w="2"/><text x="65.0119%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 0.95%)</title><rect x="64.7619%" y="565" width="0.9524%" height="15" fill="rgb(215,223,47)" fg:x="136" fg:w="2"/><text x="65.0119%" y="575.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="549" width="0.9524%" height="15" fill="rgb(248,225,23)" fg:x="136" fg:w="2"/><text x="65.0119%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (2 samples, 0.95%)</title><rect x="64.7619%" y="533" width="0.9524%" height="15" fill="rgb(250,108,0)" fg:x="136" fg:w="2"/><text x="65.0119%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (2 samples, 0.95%)</title><rect x="64.7619%" y="517" width="0.9524%" height="15" fill="rgb(228,208,7)" fg:x="136" fg:w="2"/><text x="65.0119%" y="527.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="501" width="0.9524%" height="15" fill="rgb(244,45,10)" fg:x="136" fg:w="2"/><text x="65.0119%" y="511.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="485" width="0.9524%" height="15" fill="rgb(207,125,25)" fg:x="136" fg:w="2"/><text x="65.0119%" y="495.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="469" width="0.9524%" height="15" fill="rgb(210,195,18)" fg:x="136" fg:w="2"/><text x="65.0119%" y="479.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 0.95%)</title><rect x="64.7619%" y="453" width="0.9524%" height="15" fill="rgb(249,80,12)" fg:x="136" fg:w="2"/><text x="65.0119%" y="463.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="437" width="0.9524%" height="15" fill="rgb(221,65,9)" fg:x="136" fg:w="2"/><text x="65.0119%" y="447.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="421" width="0.9524%" height="15" fill="rgb(235,49,36)" fg:x="136" fg:w="2"/><text x="65.0119%" y="431.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="405" width="0.9524%" height="15" fill="rgb(225,32,20)" fg:x="136" fg:w="2"/><text x="65.0119%" y="415.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (2 samples, 0.95%)</title><rect x="64.7619%" y="389" width="0.9524%" height="15" fill="rgb(215,141,46)" fg:x="136" fg:w="2"/><text x="65.0119%" y="399.50"></text></g><g><title>tokio::io::driver::Driver::turn (2 samples, 0.95%)</title><rect x="64.7619%" y="373" width="0.9524%" height="15" fill="rgb(250,160,47)" fg:x="136" fg:w="2"/><text x="65.0119%" y="383.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (2 samples, 0.95%)</title><rect x="64.7619%" y="357" width="0.9524%" height="15" fill="rgb(216,222,40)" fg:x="136" fg:w="2"/><text x="65.0119%" y="367.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (2 samples, 0.95%)</title><rect x="64.7619%" y="341" width="0.9524%" height="15" fill="rgb(234,217,39)" fg:x="136" fg:w="2"/><text x="65.0119%" y="351.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (2 samples, 0.95%)</title><rect x="64.7619%" y="325" width="0.9524%" height="15" fill="rgb(207,178,40)" fg:x="136" fg:w="2"/><text x="65.0119%" y="335.50"></text></g><g><title>tokio::util::wake_list::WakeList::new (2 samples, 0.95%)</title><rect x="64.7619%" y="309" width="0.9524%" height="15" fill="rgb(221,136,13)" fg:x="136" fg:w="2"/><text x="65.0119%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.95%)</title><rect x="64.7619%" y="293" width="0.9524%" height="15" fill="rgb(249,199,10)" fg:x="136" fg:w="2"/><text x="65.0119%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.95%)</title><rect x="64.7619%" y="277" width="0.9524%" height="15" fill="rgb(249,222,13)" fg:x="136" fg:w="2"/><text x="65.0119%" y="287.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.48%)</title><rect x="65.7143%" y="949" width="0.4762%" height="15" fill="rgb(244,185,38)" fg:x="138" fg:w="1"/><text x="65.9643%" y="959.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="933" width="0.4762%" height="15" fill="rgb(236,202,9)" fg:x="138" fg:w="1"/><text x="65.9643%" y="943.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="917" width="0.4762%" height="15" fill="rgb(250,229,37)" fg:x="138" fg:w="1"/><text x="65.9643%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="901" width="0.4762%" height="15" fill="rgb(206,174,23)" fg:x="138" fg:w="1"/><text x="65.9643%" y="911.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.48%)</title><rect x="65.7143%" y="885" width="0.4762%" height="15" fill="rgb(211,33,43)" fg:x="138" fg:w="1"/><text x="65.9643%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.48%)</title><rect x="65.7143%" y="869" width="0.4762%" height="15" fill="rgb(245,58,50)" fg:x="138" fg:w="1"/><text x="65.9643%" y="879.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.48%)</title><rect x="65.7143%" y="853" width="0.4762%" height="15" fill="rgb(244,68,36)" fg:x="138" fg:w="1"/><text x="65.9643%" y="863.50"></text></g><g><title>std::panicking::try (1 samples, 0.48%)</title><rect x="65.7143%" y="837" width="0.4762%" height="15" fill="rgb(232,229,15)" fg:x="138" fg:w="1"/><text x="65.9643%" y="847.50"></text></g><g><title>__rust_try (1 samples, 0.48%)</title><rect x="65.7143%" y="821" width="0.4762%" height="15" fill="rgb(254,30,23)" fg:x="138" fg:w="1"/><text x="65.9643%" y="831.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.48%)</title><rect x="65.7143%" y="805" width="0.4762%" height="15" fill="rgb(235,160,14)" fg:x="138" fg:w="1"/><text x="65.9643%" y="815.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.48%)</title><rect x="65.7143%" y="789" width="0.4762%" height="15" fill="rgb(212,155,44)" fg:x="138" fg:w="1"/><text x="65.9643%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="773" width="0.4762%" height="15" fill="rgb(226,2,50)" fg:x="138" fg:w="1"/><text x="65.9643%" y="783.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="757" width="0.4762%" height="15" fill="rgb(234,177,6)" fg:x="138" fg:w="1"/><text x="65.9643%" y="767.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.48%)</title><rect x="65.7143%" y="741" width="0.4762%" height="15" fill="rgb(217,24,9)" fg:x="138" fg:w="1"/><text x="65.9643%" y="751.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="725" width="0.4762%" height="15" fill="rgb(220,13,46)" fg:x="138" fg:w="1"/><text x="65.9643%" y="735.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="709" width="0.4762%" height="15" fill="rgb(239,221,27)" fg:x="138" fg:w="1"/><text x="65.9643%" y="719.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="693" width="0.4762%" height="15" fill="rgb(222,198,25)" fg:x="138" fg:w="1"/><text x="65.9643%" y="703.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.48%)</title><rect x="65.7143%" y="677" width="0.4762%" height="15" fill="rgb(211,99,13)" fg:x="138" fg:w="1"/><text x="65.9643%" y="687.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.48%)</title><rect x="65.7143%" y="661" width="0.4762%" height="15" fill="rgb(232,111,31)" fg:x="138" fg:w="1"/><text x="65.9643%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="645" width="0.4762%" height="15" fill="rgb(245,82,37)" fg:x="138" fg:w="1"/><text x="65.9643%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.48%)</title><rect x="65.7143%" y="629" width="0.4762%" height="15" fill="rgb(227,149,46)" fg:x="138" fg:w="1"/><text x="65.9643%" y="639.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1 samples, 0.48%)</title><rect x="65.7143%" y="613" width="0.4762%" height="15" fill="rgb(218,36,50)" fg:x="138" fg:w="1"/><text x="65.9643%" y="623.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.48%)</title><rect x="65.7143%" y="597" width="0.4762%" height="15" fill="rgb(226,80,48)" fg:x="138" fg:w="1"/><text x="65.9643%" y="607.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.48%)</title><rect x="65.7143%" y="581" width="0.4762%" height="15" fill="rgb(238,224,15)" fg:x="138" fg:w="1"/><text x="65.9643%" y="591.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.48%)</title><rect x="65.7143%" y="565" width="0.4762%" height="15" fill="rgb(241,136,10)" fg:x="138" fg:w="1"/><text x="65.9643%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.48%)</title><rect x="65.7143%" y="549" width="0.4762%" height="15" fill="rgb(208,32,45)" fg:x="138" fg:w="1"/><text x="65.9643%" y="559.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="533" width="0.4762%" height="15" fill="rgb(207,135,9)" fg:x="138" fg:w="1"/><text x="65.9643%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="517" width="0.4762%" height="15" fill="rgb(206,86,44)" fg:x="138" fg:w="1"/><text x="65.9643%" y="527.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 0.48%)</title><rect x="65.7143%" y="501" width="0.4762%" height="15" fill="rgb(245,177,15)" fg:x="138" fg:w="1"/><text x="65.9643%" y="511.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="485" width="0.4762%" height="15" fill="rgb(206,64,50)" fg:x="138" fg:w="1"/><text x="65.9643%" y="495.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="469" width="0.4762%" height="15" fill="rgb(234,36,40)" fg:x="138" fg:w="1"/><text x="65.9643%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="453" width="0.4762%" height="15" fill="rgb(213,64,8)" fg:x="138" fg:w="1"/><text x="65.9643%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.48%)</title><rect x="65.7143%" y="437" width="0.4762%" height="15" fill="rgb(210,75,36)" fg:x="138" fg:w="1"/><text x="65.9643%" y="447.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.48%)</title><rect x="65.7143%" y="421" width="0.4762%" height="15" fill="rgb(229,88,21)" fg:x="138" fg:w="1"/><text x="65.9643%" y="431.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.48%)</title><rect x="65.7143%" y="405" width="0.4762%" height="15" fill="rgb(252,204,47)" fg:x="138" fg:w="1"/><text x="65.9643%" y="415.50"></text></g><g><title>std::panicking::try (1 samples, 0.48%)</title><rect x="65.7143%" y="389" width="0.4762%" height="15" fill="rgb(208,77,27)" fg:x="138" fg:w="1"/><text x="65.9643%" y="399.50"></text></g><g><title>__rust_try (1 samples, 0.48%)</title><rect x="65.7143%" y="373" width="0.4762%" height="15" fill="rgb(221,76,26)" fg:x="138" fg:w="1"/><text x="65.9643%" y="383.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.48%)</title><rect x="65.7143%" y="357" width="0.4762%" height="15" fill="rgb(225,139,18)" fg:x="138" fg:w="1"/><text x="65.9643%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.48%)</title><rect x="65.7143%" y="341" width="0.4762%" height="15" fill="rgb(230,137,11)" fg:x="138" fg:w="1"/><text x="65.9643%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="325" width="0.4762%" height="15" fill="rgb(212,28,1)" fg:x="138" fg:w="1"/><text x="65.9643%" y="335.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="309" width="0.4762%" height="15" fill="rgb(248,164,17)" fg:x="138" fg:w="1"/><text x="65.9643%" y="319.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.48%)</title><rect x="65.7143%" y="293" width="0.4762%" height="15" fill="rgb(222,171,42)" fg:x="138" fg:w="1"/><text x="65.9643%" y="303.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="277" width="0.4762%" height="15" fill="rgb(243,84,45)" fg:x="138" fg:w="1"/><text x="65.9643%" y="287.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="65.7143%" y="261" width="0.4762%" height="15" fill="rgb(252,49,23)" fg:x="138" fg:w="1"/><text x="65.9643%" y="271.50"></text></g><g><title>hopper::server::Server&lt;R&gt;::listen::{{closure}}::{{closure}} (1 samples, 0.48%)</title><rect x="65.7143%" y="245" width="0.4762%" height="15" fill="rgb(215,19,7)" fg:x="138" fg:w="1"/><text x="65.9643%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::from_raw (1 samples, 0.48%)</title><rect x="66.1905%" y="949" width="0.4762%" height="15" fill="rgb(238,81,41)" fg:x="139" fg:w="1"/><text x="66.4405%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.48%)</title><rect x="66.6667%" y="949" width="0.4762%" height="15" fill="rgb(210,199,37)" fg:x="140" fg:w="1"/><text x="66.9167%" y="959.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.48%)</title><rect x="66.6667%" y="933" width="0.4762%" height="15" fill="rgb(244,192,49)" fg:x="140" fg:w="1"/><text x="66.9167%" y="943.50"></text></g><g><title>std::panicking::try (1 samples, 0.48%)</title><rect x="66.6667%" y="917" width="0.4762%" height="15" fill="rgb(226,211,11)" fg:x="140" fg:w="1"/><text x="66.9167%" y="927.50"></text></g><g><title>__rust_try (1 samples, 0.48%)</title><rect x="66.6667%" y="901" width="0.4762%" height="15" fill="rgb(236,162,54)" fg:x="140" fg:w="1"/><text x="66.9167%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.48%)</title><rect x="66.6667%" y="885" width="0.4762%" height="15" fill="rgb(220,229,9)" fg:x="140" fg:w="1"/><text x="66.9167%" y="895.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.48%)</title><rect x="66.6667%" y="869" width="0.4762%" height="15" fill="rgb(250,87,22)" fg:x="140" fg:w="1"/><text x="66.9167%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.48%)</title><rect x="66.6667%" y="853" width="0.4762%" height="15" fill="rgb(239,43,17)" fg:x="140" fg:w="1"/><text x="66.9167%" y="863.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.48%)</title><rect x="66.6667%" y="837" width="0.4762%" height="15" fill="rgb(231,177,25)" fg:x="140" fg:w="1"/><text x="66.9167%" y="847.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.48%)</title><rect x="66.6667%" y="821" width="0.4762%" height="15" fill="rgb(219,179,1)" fg:x="140" fg:w="1"/><text x="66.9167%" y="831.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.48%)</title><rect x="66.6667%" y="805" width="0.4762%" height="15" fill="rgb(238,219,53)" fg:x="140" fg:w="1"/><text x="66.9167%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="66.6667%" y="789" width="0.4762%" height="15" fill="rgb(232,167,36)" fg:x="140" fg:w="1"/><text x="66.9167%" y="799.50"></text></g><g><title>hopper::server::Server&lt;R&gt;::listen::{{closure}}::{{closure}} (1 samples, 0.48%)</title><rect x="66.6667%" y="773" width="0.4762%" height="15" fill="rgb(244,19,51)" fg:x="140" fg:w="1"/><text x="66.9167%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.48%)</title><rect x="66.6667%" y="757" width="0.4762%" height="15" fill="rgb(224,6,22)" fg:x="140" fg:w="1"/><text x="66.9167%" y="767.50"></text></g><g><title>hopper::server::router::Destination::connect::{{closure}} (1 samples, 0.48%)</title><rect x="66.6667%" y="741" width="0.4762%" height="15" fill="rgb(224,145,5)" fg:x="140" fg:w="1"/><text x="66.9167%" y="751.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_idle (1 samples, 0.48%)</title><rect x="67.1429%" y="949" width="0.4762%" height="15" fill="rgb(234,130,49)" fg:x="141" fg:w="1"/><text x="67.3929%" y="959.50"></text></g><g><title>[unknown] (38 samples, 18.10%)</title><rect x="50.0000%" y="965" width="18.0952%" height="15" fill="rgb(254,6,2)" fg:x="105" fg:w="38"/><text x="50.2500%" y="975.50">[unknown]</text></g><g><title>tokio::time::clock::Clock::now (1 samples, 0.48%)</title><rect x="67.6190%" y="949" width="0.4762%" height="15" fill="rgb(208,96,46)" fg:x="142" fg:w="1"/><text x="67.8690%" y="959.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.48%)</title><rect x="68.0952%" y="709" width="0.4762%" height="15" fill="rgb(239,3,39)" fg:x="143" fg:w="1"/><text x="68.3452%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.48%)</title><rect x="68.0952%" y="693" width="0.4762%" height="15" fill="rgb(233,210,1)" fg:x="143" fg:w="1"/><text x="68.3452%" y="703.50"></text></g><g><title>core::ptr::read (1 samples, 0.48%)</title><rect x="68.0952%" y="677" width="0.4762%" height="15" fill="rgb(244,137,37)" fg:x="143" fg:w="1"/><text x="68.3452%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (11 samples, 5.24%)</title><rect x="68.5714%" y="613" width="5.2381%" height="15" fill="rgb(240,136,2)" fg:x="144" fg:w="11"/><text x="68.8214%" y="623.50">parkin..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (10 samples, 4.76%)</title><rect x="69.0476%" y="597" width="4.7619%" height="15" fill="rgb(239,18,37)" fg:x="145" fg:w="10"/><text x="69.2976%" y="607.50">&lt;parki..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (10 samples, 4.76%)</title><rect x="69.0476%" y="581" width="4.7619%" height="15" fill="rgb(218,185,22)" fg:x="145" fg:w="10"/><text x="69.2976%" y="591.50">parkin..</text></g><g><title>syscall (8 samples, 3.81%)</title><rect x="70.0000%" y="565" width="3.8095%" height="15" fill="rgb(225,218,4)" fg:x="147" fg:w="8"/><text x="70.2500%" y="575.50">sysc..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (12 samples, 5.71%)</title><rect x="68.5714%" y="709" width="5.7143%" height="15" fill="rgb(230,182,32)" fg:x="144" fg:w="12"/><text x="68.8214%" y="719.50">tokio::..</text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (12 samples, 5.71%)</title><rect x="68.5714%" y="693" width="5.7143%" height="15" fill="rgb(242,56,43)" fg:x="144" fg:w="12"/><text x="68.8214%" y="703.50">lock_ap..</text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (12 samples, 5.71%)</title><rect x="68.5714%" y="677" width="5.7143%" height="15" fill="rgb(233,99,24)" fg:x="144" fg:w="12"/><text x="68.8214%" y="687.50">&lt;parkin..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (12 samples, 5.71%)</title><rect x="68.5714%" y="661" width="5.7143%" height="15" fill="rgb(234,209,42)" fg:x="144" fg:w="12"/><text x="68.8214%" y="671.50">parking..</text></g><g><title>parking_lot_core::parking_lot::park (12 samples, 5.71%)</title><rect x="68.5714%" y="645" width="5.7143%" height="15" fill="rgb(227,7,12)" fg:x="144" fg:w="12"/><text x="68.8214%" y="655.50">parking..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (12 samples, 5.71%)</title><rect x="68.5714%" y="629" width="5.7143%" height="15" fill="rgb(245,203,43)" fg:x="144" fg:w="12"/><text x="68.8214%" y="639.50">parking..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.48%)</title><rect x="73.8095%" y="613" width="0.4762%" height="15" fill="rgb(238,205,33)" fg:x="155" fg:w="1"/><text x="74.0595%" y="623.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (1 samples, 0.48%)</title><rect x="73.8095%" y="597" width="0.4762%" height="15" fill="rgb(231,56,7)" fg:x="155" fg:w="1"/><text x="74.0595%" y="607.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.48%)</title><rect x="73.8095%" y="581" width="0.4762%" height="15" fill="rgb(244,186,29)" fg:x="155" fg:w="1"/><text x="74.0595%" y="591.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.48%)</title><rect x="73.8095%" y="565" width="0.4762%" height="15" fill="rgb(234,111,31)" fg:x="155" fg:w="1"/><text x="74.0595%" y="575.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.48%)</title><rect x="73.8095%" y="549" width="0.4762%" height="15" fill="rgb(241,149,10)" fg:x="155" fg:w="1"/><text x="74.0595%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit::{{closure}} (1 samples, 0.48%)</title><rect x="73.8095%" y="533" width="0.4762%" height="15" fill="rgb(249,206,44)" fg:x="155" fg:w="1"/><text x="74.0595%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__init (1 samples, 0.48%)</title><rect x="73.8095%" y="517" width="0.4762%" height="15" fill="rgb(251,153,30)" fg:x="155" fg:w="1"/><text x="74.0595%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (1 samples, 0.48%)</title><rect x="73.8095%" y="501" width="0.4762%" height="15" fill="rgb(239,152,38)" fg:x="155" fg:w="1"/><text x="74.0595%" y="511.50"></text></g><g><title>parking_lot_core::parking_lot::grow_hashtable (1 samples, 0.48%)</title><rect x="73.8095%" y="485" width="0.4762%" height="15" fill="rgb(249,139,47)" fg:x="155" fg:w="1"/><text x="74.0595%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.48%)</title><rect x="73.8095%" y="469" width="0.4762%" height="15" fill="rgb(244,64,35)" fg:x="155" fg:w="1"/><text x="74.0595%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.95%)</title><rect x="74.2857%" y="437" width="0.9524%" height="15" fill="rgb(216,46,15)" fg:x="156" fg:w="2"/><text x="74.5357%" y="447.50"></text></g><g><title>core::mem::replace (2 samples, 0.95%)</title><rect x="74.2857%" y="421" width="0.9524%" height="15" fill="rgb(250,74,19)" fg:x="156" fg:w="2"/><text x="74.5357%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.48%)</title><rect x="75.2381%" y="389" width="0.4762%" height="15" fill="rgb(249,42,33)" fg:x="158" fg:w="1"/><text x="75.4881%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.48%)</title><rect x="75.2381%" y="373" width="0.4762%" height="15" fill="rgb(242,149,17)" fg:x="158" fg:w="1"/><text x="75.4881%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (1 samples, 0.48%)</title><rect x="75.2381%" y="357" width="0.4762%" height="15" fill="rgb(244,29,21)" fg:x="158" fg:w="1"/><text x="75.4881%" y="367.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.48%)</title><rect x="75.2381%" y="341" width="0.4762%" height="15" fill="rgb(220,130,37)" fg:x="158" fg:w="1"/><text x="75.4881%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.48%)</title><rect x="75.7143%" y="293" width="0.4762%" height="15" fill="rgb(211,67,2)" fg:x="159" fg:w="1"/><text x="75.9643%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.48%)</title><rect x="75.7143%" y="277" width="0.4762%" height="15" fill="rgb(235,68,52)" fg:x="159" fg:w="1"/><text x="75.9643%" y="287.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_condvar (6 samples, 2.86%)</title><rect x="76.1905%" y="293" width="2.8571%" height="15" fill="rgb(246,142,3)" fg:x="160" fg:w="6"/><text x="76.4405%" y="303.50">to..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (6 samples, 2.86%)</title><rect x="76.1905%" y="277" width="2.8571%" height="15" fill="rgb(241,25,7)" fg:x="160" fg:w="6"/><text x="76.4405%" y="287.50">to..</text></g><g><title>parking_lot::condvar::Condvar::wait (6 samples, 2.86%)</title><rect x="76.1905%" y="261" width="2.8571%" height="15" fill="rgb(242,119,39)" fg:x="160" fg:w="6"/><text x="76.4405%" y="271.50">pa..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 2.86%)</title><rect x="76.1905%" y="245" width="2.8571%" height="15" fill="rgb(241,98,45)" fg:x="160" fg:w="6"/><text x="76.4405%" y="255.50">pa..</text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 2.86%)</title><rect x="76.1905%" y="229" width="2.8571%" height="15" fill="rgb(254,28,30)" fg:x="160" fg:w="6"/><text x="76.4405%" y="239.50">pa..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 2.86%)</title><rect x="76.1905%" y="213" width="2.8571%" height="15" fill="rgb(241,142,54)" fg:x="160" fg:w="6"/><text x="76.4405%" y="223.50">pa..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 2.86%)</title><rect x="76.1905%" y="197" width="2.8571%" height="15" fill="rgb(222,85,15)" fg:x="160" fg:w="6"/><text x="76.4405%" y="207.50">pa..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 2.86%)</title><rect x="76.1905%" y="181" width="2.8571%" height="15" fill="rgb(210,85,47)" fg:x="160" fg:w="6"/><text x="76.4405%" y="191.50">&lt;p..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 2.86%)</title><rect x="76.1905%" y="165" width="2.8571%" height="15" fill="rgb(224,206,25)" fg:x="160" fg:w="6"/><text x="76.4405%" y="175.50">pa..</text></g><g><title>syscall (5 samples, 2.38%)</title><rect x="76.6667%" y="149" width="2.3810%" height="15" fill="rgb(243,201,19)" fg:x="161" fg:w="5"/><text x="76.9167%" y="159.50">sy..</text></g><g><title>mio::poll::Poll::poll (23 samples, 10.95%)</title><rect x="79.5238%" y="133" width="10.9524%" height="15" fill="rgb(236,59,4)" fg:x="167" fg:w="23"/><text x="79.7738%" y="143.50">mio::poll::Poll:..</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (23 samples, 10.95%)</title><rect x="79.5238%" y="117" width="10.9524%" height="15" fill="rgb(254,179,45)" fg:x="167" fg:w="23"/><text x="79.7738%" y="127.50">mio::sys::unix::..</text></g><g><title>epoll_wait (23 samples, 10.95%)</title><rect x="79.5238%" y="101" width="10.9524%" height="15" fill="rgb(226,14,10)" fg:x="167" fg:w="23"/><text x="79.7738%" y="111.50">epoll_wait</text></g><g><title>[libc.so.6] (2 samples, 0.95%)</title><rect x="89.5238%" y="85" width="0.9524%" height="15" fill="rgb(244,27,41)" fg:x="188" fg:w="2"/><text x="89.7738%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.48%)</title><rect x="90.4762%" y="101" width="0.4762%" height="15" fill="rgb(235,35,32)" fg:x="190" fg:w="1"/><text x="90.7262%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.48%)</title><rect x="90.4762%" y="85" width="0.4762%" height="15" fill="rgb(218,68,31)" fg:x="190" fg:w="1"/><text x="90.7262%" y="95.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (26 samples, 12.38%)</title><rect x="79.0476%" y="165" width="12.3810%" height="15" fill="rgb(207,120,37)" fg:x="166" fg:w="26"/><text x="79.2976%" y="175.50">&lt;tokio::io::driver..</text></g><g><title>tokio::io::driver::Driver::turn (26 samples, 12.38%)</title><rect x="79.0476%" y="149" width="12.3810%" height="15" fill="rgb(227,98,0)" fg:x="166" fg:w="26"/><text x="79.2976%" y="159.50">tokio::io::driver:..</text></g><g><title>tokio::io::driver::Driver::dispatch (2 samples, 0.95%)</title><rect x="90.4762%" y="133" width="0.9524%" height="15" fill="rgb(207,7,3)" fg:x="190" fg:w="2"/><text x="90.7262%" y="143.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (2 samples, 0.95%)</title><rect x="90.4762%" y="117" width="0.9524%" height="15" fill="rgb(206,98,19)" fg:x="190" fg:w="2"/><text x="90.7262%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.48%)</title><rect x="90.9524%" y="101" width="0.4762%" height="15" fill="rgb(217,5,26)" fg:x="191" fg:w="1"/><text x="91.2024%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.48%)</title><rect x="90.9524%" y="85" width="0.4762%" height="15" fill="rgb(235,190,38)" fg:x="191" fg:w="1"/><text x="91.2024%" y="95.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (27 samples, 12.86%)</title><rect x="79.0476%" y="213" width="12.8571%" height="15" fill="rgb(247,86,24)" fg:x="166" fg:w="27"/><text x="79.2976%" y="223.50">&lt;tokio::park::eithe..</text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (27 samples, 12.86%)</title><rect x="79.0476%" y="197" width="12.8571%" height="15" fill="rgb(205,101,16)" fg:x="166" fg:w="27"/><text x="79.2976%" y="207.50">&lt;tokio::process::im..</text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (27 samples, 12.86%)</title><rect x="79.0476%" y="181" width="12.8571%" height="15" fill="rgb(246,168,33)" fg:x="166" fg:w="27"/><text x="79.2976%" y="191.50">&lt;tokio::signal::uni..</text></g><g><title>tokio::signal::unix::driver::Driver::process (1 samples, 0.48%)</title><rect x="91.4286%" y="165" width="0.4762%" height="15" fill="rgb(231,114,1)" fg:x="192" fg:w="1"/><text x="91.6786%" y="175.50"></text></g><g><title>[hopper] (1 samples, 0.48%)</title><rect x="91.4286%" y="149" width="0.4762%" height="15" fill="rgb(207,184,53)" fg:x="192" fg:w="1"/><text x="91.6786%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::registration (1 samples, 0.48%)</title><rect x="91.4286%" y="133" width="0.4762%" height="15" fill="rgb(224,95,51)" fg:x="192" fg:w="1"/><text x="91.6786%" y="143.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (35 samples, 16.67%)</title><rect x="75.7143%" y="325" width="16.6667%" height="15" fill="rgb(212,188,45)" fg:x="159" fg:w="35"/><text x="75.9643%" y="335.50">&lt;tokio::runtime::thread_po..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (35 samples, 16.67%)</title><rect x="75.7143%" y="309" width="16.6667%" height="15" fill="rgb(223,154,38)" fg:x="159" fg:w="35"/><text x="75.9643%" y="319.50">tokio::runtime::thread_poo..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (28 samples, 13.33%)</title><rect x="79.0476%" y="293" width="13.3333%" height="15" fill="rgb(251,22,52)" fg:x="166" fg:w="28"/><text x="79.2976%" y="303.50">tokio::runtime::thre..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (28 samples, 13.33%)</title><rect x="79.0476%" y="277" width="13.3333%" height="15" fill="rgb(229,209,22)" fg:x="166" fg:w="28"/><text x="79.2976%" y="287.50">&lt;tokio::runtime::dri..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (28 samples, 13.33%)</title><rect x="79.0476%" y="261" width="13.3333%" height="15" fill="rgb(234,138,34)" fg:x="166" fg:w="28"/><text x="79.2976%" y="271.50">&lt;tokio::park::either..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (28 samples, 13.33%)</title><rect x="79.0476%" y="245" width="13.3333%" height="15" fill="rgb(212,95,11)" fg:x="166" fg:w="28"/><text x="79.2976%" y="255.50">&lt;tokio::time::driver..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (28 samples, 13.33%)</title><rect x="79.0476%" y="229" width="13.3333%" height="15" fill="rgb(240,179,47)" fg:x="166" fg:w="28"/><text x="79.2976%" y="239.50">tokio::time::driver:..</text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (1 samples, 0.48%)</title><rect x="91.9048%" y="213" width="0.4762%" height="15" fill="rgb(240,163,11)" fg:x="193" fg:w="1"/><text x="92.1548%" y="223.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.48%)</title><rect x="91.9048%" y="197" width="0.4762%" height="15" fill="rgb(236,37,12)" fg:x="193" fg:w="1"/><text x="92.1548%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.48%)</title><rect x="91.9048%" y="181" width="0.4762%" height="15" fill="rgb(232,164,16)" fg:x="193" fg:w="1"/><text x="92.1548%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="91.9048%" y="165" width="0.4762%" height="15" fill="rgb(244,205,15)" fg:x="193" fg:w="1"/><text x="92.1548%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.48%)</title><rect x="91.9048%" y="149" width="0.4762%" height="15" fill="rgb(223,117,47)" fg:x="193" fg:w="1"/><text x="92.1548%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.48%)</title><rect x="91.9048%" y="133" width="0.4762%" height="15" fill="rgb(244,107,35)" fg:x="193" fg:w="1"/><text x="92.1548%" y="143.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.48%)</title><rect x="91.9048%" y="117" width="0.4762%" height="15" fill="rgb(205,140,8)" fg:x="193" fg:w="1"/><text x="92.1548%" y="127.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (36 samples, 17.14%)</title><rect x="75.7143%" y="341" width="17.1429%" height="15" fill="rgb(228,84,46)" fg:x="159" fg:w="36"/><text x="75.9643%" y="351.50">tokio::runtime::thread_pool..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::thread_pool::park::Parker&gt;&gt; (1 samples, 0.48%)</title><rect x="92.3810%" y="325" width="0.4762%" height="15" fill="rgb(254,188,9)" fg:x="194" fg:w="1"/><text x="92.6310%" y="335.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (2 samples, 0.95%)</title><rect x="92.8571%" y="341" width="0.9524%" height="15" fill="rgb(206,112,54)" fg:x="195" fg:w="2"/><text x="93.1071%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="93.3333%" y="325" width="0.4762%" height="15" fill="rgb(216,84,49)" fg:x="196" fg:w="1"/><text x="93.5833%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.48%)</title><rect x="93.3333%" y="309" width="0.4762%" height="15" fill="rgb(214,194,35)" fg:x="196" fg:w="1"/><text x="93.5833%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.48%)</title><rect x="93.3333%" y="293" width="0.4762%" height="15" fill="rgb(249,28,3)" fg:x="196" fg:w="1"/><text x="93.5833%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.48%)</title><rect x="93.8095%" y="309" width="0.4762%" height="15" fill="rgb(222,56,52)" fg:x="197" fg:w="1"/><text x="94.0595%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="93.8095%" y="293" width="0.4762%" height="15" fill="rgb(245,217,50)" fg:x="197" fg:w="1"/><text x="94.0595%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.48%)</title><rect x="93.8095%" y="277" width="0.4762%" height="15" fill="rgb(213,201,24)" fg:x="197" fg:w="1"/><text x="94.0595%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.48%)</title><rect x="93.8095%" y="261" width="0.4762%" height="15" fill="rgb(248,116,28)" fg:x="197" fg:w="1"/><text x="94.0595%" y="271.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (2 samples, 0.95%)</title><rect x="93.8095%" y="341" width="0.9524%" height="15" fill="rgb(219,72,43)" fg:x="197" fg:w="2"/><text x="94.0595%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::unpark_worker_by_id (2 samples, 0.95%)</title><rect x="93.8095%" y="325" width="0.9524%" height="15" fill="rgb(209,138,14)" fg:x="197" fg:w="2"/><text x="94.0595%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::swap_remove (1 samples, 0.48%)</title><rect x="94.2857%" y="309" width="0.4762%" height="15" fill="rgb(222,18,33)" fg:x="198" fg:w="1"/><text x="94.5357%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (41 samples, 19.52%)</title><rect x="75.7143%" y="357" width="19.5238%" height="15" fill="rgb(213,199,7)" fg:x="159" fg:w="41"/><text x="75.9643%" y="367.50">tokio::runtime::thread_pool::wo..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (1 samples, 0.48%)</title><rect x="94.7619%" y="341" width="0.4762%" height="15" fill="rgb(250,110,10)" fg:x="199" fg:w="1"/><text x="95.0119%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU16::load (1 samples, 0.48%)</title><rect x="95.7143%" y="309" width="0.4762%" height="15" fill="rgb(248,123,6)" fg:x="201" fg:w="1"/><text x="95.9643%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.48%)</title><rect x="95.7143%" y="293" width="0.4762%" height="15" fill="rgb(206,91,31)" fg:x="201" fg:w="1"/><text x="95.9643%" y="303.50"></text></g><g><title>std::panic::catch_unwind (60 samples, 28.57%)</title><rect x="68.0952%" y="853" width="28.5714%" height="15" fill="rgb(211,154,13)" fg:x="143" fg:w="60"/><text x="68.3452%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (60 samples, 28.57%)</title><rect x="68.0952%" y="837" width="28.5714%" height="15" fill="rgb(225,148,7)" fg:x="143" fg:w="60"/><text x="68.3452%" y="847.50">std::panicking::try</text></g><g><title>__rust_try (60 samples, 28.57%)</title><rect x="68.0952%" y="821" width="28.5714%" height="15" fill="rgb(220,160,43)" fg:x="143" fg:w="60"/><text x="68.3452%" y="831.50">__rust_try</text></g><g><title>std::panicking::try::do_call (60 samples, 28.57%)</title><rect x="68.0952%" y="805" width="28.5714%" height="15" fill="rgb(213,52,39)" fg:x="143" fg:w="60"/><text x="68.3452%" y="815.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (60 samples, 28.57%)</title><rect x="68.0952%" y="789" width="28.5714%" height="15" fill="rgb(243,137,7)" fg:x="143" fg:w="60"/><text x="68.3452%" y="799.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt;..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (60 samples, 28.57%)</title><rect x="68.0952%" y="773" width="28.5714%" height="15" fill="rgb(230,79,13)" fg:x="143" fg:w="60"/><text x="68.3452%" y="783.50">std::thread::Builder::spawn_unchecked_::{{clos..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (60 samples, 28.57%)</title><rect x="68.0952%" y="757" width="28.5714%" height="15" fill="rgb(247,105,23)" fg:x="143" fg:w="60"/><text x="68.3452%" y="767.50">std::sys_common::backtrace::__rust_begin_short..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (60 samples, 28.57%)</title><rect x="68.0952%" y="741" width="28.5714%" height="15" fill="rgb(223,179,41)" fg:x="143" fg:w="60"/><text x="68.3452%" y="751.50">tokio::runtime::blocking::pool::Spawner::spawn..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (60 samples, 28.57%)</title><rect x="68.0952%" y="725" width="28.5714%" height="15" fill="rgb(218,9,34)" fg:x="143" fg:w="60"/><text x="68.3452%" y="735.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (47 samples, 22.38%)</title><rect x="74.2857%" y="709" width="22.3810%" height="15" fill="rgb(222,106,8)" fg:x="156" fg:w="47"/><text x="74.5357%" y="719.50">tokio::runtime::blocking::pool::Tas..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (47 samples, 22.38%)</title><rect x="74.2857%" y="693" width="22.3810%" height="15" fill="rgb(211,220,0)" fg:x="156" fg:w="47"/><text x="74.5357%" y="703.50">tokio::runtime::task::UnownedTask&lt;S..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (47 samples, 22.38%)</title><rect x="74.2857%" y="677" width="22.3810%" height="15" fill="rgb(229,52,16)" fg:x="156" fg:w="47"/><text x="74.5357%" y="687.50">tokio::runtime::task::raw::RawTask:..</text></g><g><title>tokio::runtime::task::raw::poll (47 samples, 22.38%)</title><rect x="74.2857%" y="661" width="22.3810%" height="15" fill="rgb(212,155,18)" fg:x="156" fg:w="47"/><text x="74.5357%" y="671.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (47 samples, 22.38%)</title><rect x="74.2857%" y="645" width="22.3810%" height="15" fill="rgb(242,21,14)" fg:x="156" fg:w="47"/><text x="74.5357%" y="655.50">tokio::runtime::task::harness::Harn..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (47 samples, 22.38%)</title><rect x="74.2857%" y="629" width="22.3810%" height="15" fill="rgb(222,19,48)" fg:x="156" fg:w="47"/><text x="74.5357%" y="639.50">tokio::runtime::task::harness::Harn..</text></g><g><title>tokio::runtime::task::harness::poll_future (47 samples, 22.38%)</title><rect x="74.2857%" y="613" width="22.3810%" height="15" fill="rgb(232,45,27)" fg:x="156" fg:w="47"/><text x="74.5357%" y="623.50">tokio::runtime::task::harness::poll..</text></g><g><title>std::panic::catch_unwind (47 samples, 22.38%)</title><rect x="74.2857%" y="597" width="22.3810%" height="15" fill="rgb(249,103,42)" fg:x="156" fg:w="47"/><text x="74.5357%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (47 samples, 22.38%)</title><rect x="74.2857%" y="581" width="22.3810%" height="15" fill="rgb(246,81,33)" fg:x="156" fg:w="47"/><text x="74.5357%" y="591.50">std::panicking::try</text></g><g><title>__rust_try (47 samples, 22.38%)</title><rect x="74.2857%" y="565" width="22.3810%" height="15" fill="rgb(252,33,42)" fg:x="156" fg:w="47"/><text x="74.5357%" y="575.50">__rust_try</text></g><g><title>std::panicking::try::do_call (47 samples, 22.38%)</title><rect x="74.2857%" y="549" width="22.3810%" height="15" fill="rgb(209,212,41)" fg:x="156" fg:w="47"/><text x="74.5357%" y="559.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (47 samples, 22.38%)</title><rect x="74.2857%" y="533" width="22.3810%" height="15" fill="rgb(207,154,6)" fg:x="156" fg:w="47"/><text x="74.5357%" y="543.50">&lt;core::panic::unwind_safe::AssertUn..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (47 samples, 22.38%)</title><rect x="74.2857%" y="517" width="22.3810%" height="15" fill="rgb(223,64,47)" fg:x="156" fg:w="47"/><text x="74.5357%" y="527.50">tokio::runtime::task::harness::poll..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (47 samples, 22.38%)</title><rect x="74.2857%" y="501" width="22.3810%" height="15" fill="rgb(211,161,38)" fg:x="156" fg:w="47"/><text x="74.5357%" y="511.50">tokio::runtime::task::core::CoreSta..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (47 samples, 22.38%)</title><rect x="74.2857%" y="485" width="22.3810%" height="15" fill="rgb(219,138,40)" fg:x="156" fg:w="47"/><text x="74.5357%" y="495.50">tokio::loom::std::unsafe_cell::Unsa..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (47 samples, 22.38%)</title><rect x="74.2857%" y="469" width="22.3810%" height="15" fill="rgb(241,228,46)" fg:x="156" fg:w="47"/><text x="74.5357%" y="479.50">tokio::runtime::task::core::CoreSta..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 22.38%)</title><rect x="74.2857%" y="453" width="22.3810%" height="15" fill="rgb(223,209,38)" fg:x="156" fg:w="47"/><text x="74.5357%" y="463.50">&lt;tokio::runtime::blocking::task::Bl..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (45 samples, 21.43%)</title><rect x="75.2381%" y="437" width="21.4286%" height="15" fill="rgb(236,164,45)" fg:x="158" fg:w="45"/><text x="75.4881%" y="447.50">tokio::runtime::thread_pool::worke..</text></g><g><title>tokio::runtime::thread_pool::worker::run (45 samples, 21.43%)</title><rect x="75.2381%" y="421" width="21.4286%" height="15" fill="rgb(231,15,5)" fg:x="158" fg:w="45"/><text x="75.4881%" y="431.50">tokio::runtime::thread_pool::worke..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (45 samples, 21.43%)</title><rect x="75.2381%" y="405" width="21.4286%" height="15" fill="rgb(252,35,15)" fg:x="158" fg:w="45"/><text x="75.4881%" y="415.50">tokio::macros::scoped_tls::ScopedK..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (44 samples, 20.95%)</title><rect x="75.7143%" y="389" width="20.9524%" height="15" fill="rgb(248,181,18)" fg:x="159" fg:w="44"/><text x="75.9643%" y="399.50">tokio::runtime::thread_pool::work..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (44 samples, 20.95%)</title><rect x="75.7143%" y="373" width="20.9524%" height="15" fill="rgb(233,39,42)" fg:x="159" fg:w="44"/><text x="75.9643%" y="383.50">tokio::runtime::thread_pool::work..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (3 samples, 1.43%)</title><rect x="95.2381%" y="357" width="1.4286%" height="15" fill="rgb(238,110,33)" fg:x="200" fg:w="3"/><text x="95.4881%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.95%)</title><rect x="95.7143%" y="341" width="0.9524%" height="15" fill="rgb(233,195,10)" fg:x="201" fg:w="2"/><text x="95.9643%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into2 (2 samples, 0.95%)</title><rect x="95.7143%" y="325" width="0.9524%" height="15" fill="rgb(254,105,3)" fg:x="201" fg:w="2"/><text x="95.9643%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.48%)</title><rect x="96.1905%" y="309" width="0.4762%" height="15" fill="rgb(221,225,9)" fg:x="202" fg:w="1"/><text x="96.4405%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.48%)</title><rect x="96.1905%" y="293" width="0.4762%" height="15" fill="rgb(224,227,45)" fg:x="202" fg:w="1"/><text x="96.4405%" y="303.50"></text></g><g><title>__clone (61 samples, 29.05%)</title><rect x="68.0952%" y="965" width="29.0476%" height="15" fill="rgb(229,198,43)" fg:x="143" fg:w="61"/><text x="68.3452%" y="975.50">__clone</text></g><g><title>[libc.so.6] (61 samples, 29.05%)</title><rect x="68.0952%" y="949" width="29.0476%" height="15" fill="rgb(206,209,35)" fg:x="143" fg:w="61"/><text x="68.3452%" y="959.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (61 samples, 29.05%)</title><rect x="68.0952%" y="933" width="29.0476%" height="15" fill="rgb(245,195,53)" fg:x="143" fg:w="61"/><text x="68.3452%" y="943.50">std::sys::unix::thread::Thread::new::thread_sta..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 29.05%)</title><rect x="68.0952%" y="917" width="29.0476%" height="15" fill="rgb(240,92,26)" fg:x="143" fg:w="61"/><text x="68.3452%" y="927.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 29.05%)</title><rect x="68.0952%" y="901" width="29.0476%" height="15" fill="rgb(207,40,23)" fg:x="143" fg:w="61"/><text x="68.3452%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (61 samples, 29.05%)</title><rect x="68.0952%" y="885" width="29.0476%" height="15" fill="rgb(223,111,35)" fg:x="143" fg:w="61"/><text x="68.3452%" y="895.50">core::ops::function::FnOnce::call_once{{vtable...</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (61 samples, 29.05%)</title><rect x="68.0952%" y="869" width="29.0476%" height="15" fill="rgb(229,147,28)" fg:x="143" fg:w="61"/><text x="68.3452%" y="879.50">std::thread::Builder::spawn_unchecked_::{{closu..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.48%)</title><rect x="96.6667%" y="853" width="0.4762%" height="15" fill="rgb(211,29,28)" fg:x="203" fg:w="1"/><text x="96.9167%" y="863.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.48%)</title><rect x="96.6667%" y="837" width="0.4762%" height="15" fill="rgb(228,72,33)" fg:x="203" fg:w="1"/><text x="96.9167%" y="847.50"></text></g><g><title>realloc (1 samples, 0.48%)</title><rect x="96.6667%" y="821" width="0.4762%" height="15" fill="rgb(205,214,31)" fg:x="203" fg:w="1"/><text x="96.9167%" y="831.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (1 samples, 0.48%)</title><rect x="97.1429%" y="965" width="0.4762%" height="15" fill="rgb(224,111,15)" fg:x="204" fg:w="1"/><text x="97.3929%" y="975.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.48%)</title><rect x="97.1429%" y="949" width="0.4762%" height="15" fill="rgb(253,21,26)" fg:x="204" fg:w="1"/><text x="97.3929%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mio::event::events::Events&gt;&gt; (1 samples, 0.48%)</title><rect x="97.6190%" y="965" width="0.4762%" height="15" fill="rgb(245,139,43)" fg:x="205" fg:w="1"/><text x="97.8690%" y="975.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.48%)</title><rect x="98.0952%" y="965" width="0.4762%" height="15" fill="rgb(252,170,7)" fg:x="206" fg:w="1"/><text x="98.3452%" y="975.50"></text></g><g><title>parking_lot_core::parking_lot::NUM_THREADS (1 samples, 0.48%)</title><rect x="98.5714%" y="965" width="0.4762%" height="15" fill="rgb(231,118,14)" fg:x="207" fg:w="1"/><text x="98.8214%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.48%)</title><rect x="98.5714%" y="949" width="0.4762%" height="15" fill="rgb(238,83,0)" fg:x="207" fg:w="1"/><text x="98.8214%" y="959.50"></text></g><g><title>tokio::process::imp::ORPHAN_QUEUE (1 samples, 0.48%)</title><rect x="99.0476%" y="965" width="0.4762%" height="15" fill="rgb(221,39,39)" fg:x="208" fg:w="1"/><text x="99.2976%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.48%)</title><rect x="99.0476%" y="949" width="0.4762%" height="15" fill="rgb(222,119,46)" fg:x="208" fg:w="1"/><text x="99.2976%" y="959.50"></text></g><g><title>all (210 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="210"/><text x="0.2500%" y="1007.50"></text></g><g><title>tokio-runtime-w (143 samples, 68.10%)</title><rect x="31.9048%" y="981" width="68.0952%" height="15" fill="rgb(219,113,52)" fg:x="67" fg:w="143"/><text x="32.1548%" y="991.50">tokio-runtime-w</text></g><g><title>tokio::util::slab::Address::page (1 samples, 0.48%)</title><rect x="99.5238%" y="965" width="0.4762%" height="15" fill="rgb(214,7,15)" fg:x="209" fg:w="1"/><text x="99.7738%" y="975.50"></text></g></svg></svg>